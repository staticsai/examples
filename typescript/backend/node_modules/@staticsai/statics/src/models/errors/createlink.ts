/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The application requested was not found
 */
export type CreateLinkLinkResponseBodyData = {
  statusCode: number;
  message: string;
  error?: string | undefined;
};

/**
 * The application requested was not found
 */
export class CreateLinkLinkResponseBody extends Error {
  statusCode: number;
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateLinkLinkResponseBodyData;

  constructor(err: CreateLinkLinkResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;

    this.name = "CreateLinkLinkResponseBody";
  }
}

export type CreateLinkResponseBodyData = {
  statusCode: number;
  message: string;
  error?: string | undefined;
};

export class CreateLinkResponseBody extends Error {
  statusCode: number;
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateLinkResponseBodyData;

  constructor(err: CreateLinkResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;

    this.name = "CreateLinkResponseBody";
  }
}

/** @internal */
export const CreateLinkLinkResponseBody$inboundSchema: z.ZodType<
  CreateLinkLinkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  message: z.string(),
  error: z.string().optional(),
})
  .transform((v) => {
    return new CreateLinkLinkResponseBody(v);
  });

/** @internal */
export type CreateLinkLinkResponseBody$Outbound = {
  statusCode: number;
  message: string;
  error?: string | undefined;
};

/** @internal */
export const CreateLinkLinkResponseBody$outboundSchema: z.ZodType<
  CreateLinkLinkResponseBody$Outbound,
  z.ZodTypeDef,
  CreateLinkLinkResponseBody
> = z.instanceof(CreateLinkLinkResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    statusCode: z.number(),
    message: z.string(),
    error: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLinkLinkResponseBody$ {
  /** @deprecated use `CreateLinkLinkResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateLinkLinkResponseBody$inboundSchema;
  /** @deprecated use `CreateLinkLinkResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateLinkLinkResponseBody$outboundSchema;
  /** @deprecated use `CreateLinkLinkResponseBody$Outbound` instead. */
  export type Outbound = CreateLinkLinkResponseBody$Outbound;
}

/** @internal */
export const CreateLinkResponseBody$inboundSchema: z.ZodType<
  CreateLinkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  message: z.string(),
  error: z.string().optional(),
})
  .transform((v) => {
    return new CreateLinkResponseBody(v);
  });

/** @internal */
export type CreateLinkResponseBody$Outbound = {
  statusCode: number;
  message: string;
  error?: string | undefined;
};

/** @internal */
export const CreateLinkResponseBody$outboundSchema: z.ZodType<
  CreateLinkResponseBody$Outbound,
  z.ZodTypeDef,
  CreateLinkResponseBody
> = z.instanceof(CreateLinkResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    statusCode: z.number(),
    message: z.string(),
    error: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLinkResponseBody$ {
  /** @deprecated use `CreateLinkResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateLinkResponseBody$inboundSchema;
  /** @deprecated use `CreateLinkResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateLinkResponseBody$outboundSchema;
  /** @deprecated use `CreateLinkResponseBody$Outbound` instead. */
  export type Outbound = CreateLinkResponseBody$Outbound;
}
