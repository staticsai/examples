/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Status of the account
 */
export const AccountDtoStatus = {
  Active: "ACTIVE",
  Closed: "CLOSED",
  NeedsRefresh: "NEEDS_REFRESH",
} as const;
/**
 * Status of the account
 */
export type AccountDtoStatus = ClosedEnum<typeof AccountDtoStatus>;

export type AccountDto = {
  /**
   * Unique immutable identifier of the account
   */
  id: string;
  /**
   * Organization ID associated with the account
   */
  orgId: string;
  /**
   * Application ID associated with the account
   */
  appId: string;
  /**
   * Status of the account
   */
  status: AccountDtoStatus;
  /**
   * Timestamp when the account was created
   */
  createdAt: Date;
  /**
   * Timestamp when the account was last updated
   */
  updatedAt: Date;
};

/** @internal */
export const AccountDtoStatus$inboundSchema: z.ZodNativeEnum<
  typeof AccountDtoStatus
> = z.nativeEnum(AccountDtoStatus);

/** @internal */
export const AccountDtoStatus$outboundSchema: z.ZodNativeEnum<
  typeof AccountDtoStatus
> = AccountDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountDtoStatus$ {
  /** @deprecated use `AccountDtoStatus$inboundSchema` instead. */
  export const inboundSchema = AccountDtoStatus$inboundSchema;
  /** @deprecated use `AccountDtoStatus$outboundSchema` instead. */
  export const outboundSchema = AccountDtoStatus$outboundSchema;
}

/** @internal */
export const AccountDto$inboundSchema: z.ZodType<
  AccountDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  orgId: z.string(),
  appId: z.string(),
  status: AccountDtoStatus$inboundSchema,
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type AccountDto$Outbound = {
  id: string;
  orgId: string;
  appId: string;
  status: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const AccountDto$outboundSchema: z.ZodType<
  AccountDto$Outbound,
  z.ZodTypeDef,
  AccountDto
> = z.object({
  id: z.string(),
  orgId: z.string(),
  appId: z.string(),
  status: AccountDtoStatus$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountDto$ {
  /** @deprecated use `AccountDto$inboundSchema` instead. */
  export const inboundSchema = AccountDto$inboundSchema;
  /** @deprecated use `AccountDto$outboundSchema` instead. */
  export const outboundSchema = AccountDto$outboundSchema;
  /** @deprecated use `AccountDto$Outbound` instead. */
  export type Outbound = AccountDto$Outbound;
}
