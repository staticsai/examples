/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { getAccount } from "../funcs/getAccount.js";
import { getAccounts } from "../funcs/getAccounts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Link } from "./link.js";
import { Proxy } from "./proxy.js";

export class Statics extends ClientSDK {
  private _link?: Link;
  get link(): Link {
    return (this._link ??= new Link(this._options));
  }

  private _proxy?: Proxy;
  get proxy(): Proxy {
    return (this._proxy ??= new Proxy(this._options));
  }

  /**
   * Get all accounts
   *
   * @remarks
   * Get all accounts in the organization
   */
  async getAccounts(
    options?: RequestOptions,
  ): Promise<components.AccountsDto> {
    return unwrapAsync(getAccounts(
      this,
      options,
    ));
  }

  /**
   * Get an account
   *
   * @remarks
   * Get a specific accounts in the organization
   */
  async getAccount(
    accountId: string,
    options?: RequestOptions,
  ): Promise<components.AccountDto> {
    return unwrapAsync(getAccount(
      this,
      accountId,
      options,
    ));
  }
}
